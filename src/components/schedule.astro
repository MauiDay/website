---
import loadConfig from '../configLoader';
import type { Session, Speaker } from '../types';

const config = await loadConfig();
const sessionizeUrl = `https://sessionize.com/api/v2/${config.sessionizeId}/view/all`;
let sessions: Session[] = [];
let error = false;

try {

  if(config.hasAnnouncedSchedule)
  {
      // Attempt to fetch data from the Sessionize API
  const response = await fetch(sessionizeUrl);
  
  if (!response.ok) {
    throw new Error(`Failed to fetch: ${response.statusText}`);
  }

  const data = await response.json();
  
  sessions = data.sessions.map(session => {
        // Find the speaker details if any
        const speakerDetails = session.speakers.map(speakerId => {
            return data.speakers.find(speaker => speaker.id === speakerId);
        }).filter(Boolean) as Speaker[]; // Filter out any null results

        // Calculate the duration in minutes
        const duration = Math.floor((new Date(session.endsAt).getTime() - new Date(session.startsAt).getTime()) / (1000 * 60));

        return {
            title: session.title,
            isServiceSession: session.isServiceSession,
            description: session.description,
            startTime: new Date(session.startsAt).toLocaleTimeString('nl-NL', {
                    hour: '2-digit',
                    minute: '2-digit',
                  }),
            endTime: new Date(session.endsAt).toLocaleTimeString('nl-NL', {
                    hour: '2-digit',
                    minute: '2-digit',
                  }),
            speakers: speakerDetails.map(speaker => speaker.fullName).join(", "),
            speakerImages: speakerDetails.map(speaker => speaker.profilePicture),
            room: session.roomId,
            duration: duration
        };
    }) || []; // Make sure to handle if data.sessions doesn't exist
  }
} catch (err) {
  console.error('Error fetching schedule:', err);
  error = true;
}
---

<section id="schedule" class="bg-white py-24">
    <!-- Content Container -->
    <div class="container max-w-4xl mx-auto px-4 text-center">
      <!-- Section Title -->
      <p class="text-brand-extra font-bold mb-4 text-xl font-header uppercase">Where to go and when</p>
      <h2 class="text-brand-dark text-4xl md:text-4xl uppercase font-header font-bold mb-4">The Schedule</h2>
      <p class="text-brand-dark text-base text-md mb-12">
        Check out our schedule below to plan your day and make the most of this event. See you there!
      </p>
      {error ? (
        <p class="text-brand-dark text-md italic">Sorry, we couldn't retrieve the schedule at this time. Please try again later.</p>
      ) : sessions.length === 0 ? (
        <p class="text-brand-dark text-md italic">Sessions have not been announced yet. Please check back soon!</p>
      ) : (
      <div class="max-w-4xl mx-auto px-4 text-center">
        {sessions.map((session, index) => (
            <div className={`flex gap-4 flex-row px-4 md:px-16 items-stretch ${index % 2 === 0 ? 'bg-gray-100' : 'bg-white'}`}>
                <div class="flex-shrink-0 md:block hidden py-8 w-32 mt-1 text-right">
                    <p class="text-gray-600 font-medium text-sm">{session.startTime} - {session.endTime}</p>
                    <p class="text-gray-500 text-sm">{session.duration}min</p>
                </div>
                <div class="flex-shrink-0 bg-transparent w-[2px]"></div>
                <div class="flex-shrink-0 py-8 flex-1 text-left">
                    <div class="flex-shrink-0 md:hidden block text-left">
                      <p class="text-gray-600 font-medium text-sm">{session.startTime} - {session.endTime} ({session.duration}min)</p>
                    </div>
                    <h4 class="mt-0 mb-2 font-semibold text-lg text-brand-dark">{session.title}</h4>
                    <p class="text-base md:block hidden text-sm text-gray-600 leading-6 space-y-4">
                        {session.description}
                    </p>
                    <div className={`flex items-center flex-row gap-3 ${!session.isServiceSession ? 'mt-4' : ''}`}>
                        {session.speakerImages.map((image, index) => (
                            <img
                                key={index}
                                src={image}
                                class="object-cover rounded-full flex-shrink-0 w-8 h-8"
                            />
                        ))}
                        <div class="flex items-center">
                            <p class="leading-5 text-brand-dark font-medium text-md">{session.speakers}</p>
                        </div>
                    </div>
                </div>
            </div>
        ))}
      </div>
      )}
    </div>
  </section>